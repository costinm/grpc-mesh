// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: envoy/service/load_stats/v2/lrs.proto

package v2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/costinm/grpc-mesh/gen/proto/go/envoy/service/load_stats/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LoadReportingServiceName is the fully-qualified name of the LoadReportingService service.
	LoadReportingServiceName = "envoy.service.load_stats.v2.LoadReportingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoadReportingServiceStreamLoadStatsProcedure is the fully-qualified name of the
	// LoadReportingService's StreamLoadStats RPC.
	LoadReportingServiceStreamLoadStatsProcedure = "/envoy.service.load_stats.v2.LoadReportingService/StreamLoadStats"
)

// LoadReportingServiceClient is a client for the envoy.service.load_stats.v2.LoadReportingService
// service.
type LoadReportingServiceClient interface {
	// Advanced API to allow for multi-dimensional load balancing by remote
	// server. For receiving LB assignments, the steps are:
	// 1, The management server is configured with per cluster/zone/load metric
	//
	//	capacity configuration. The capacity configuration definition is
	//	outside of the scope of this document.
	//  2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
	//     to balance.
	//
	// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
	// management server:
	//  1. Once a connection establishes, the management server publishes a
	//     LoadStatsResponse for all clusters it is interested in learning load
	//     stats about.
	//  2. For each cluster, Envoy load balances incoming traffic to upstream hosts
	//     based on per-zone weights and/or per-instance weights (if specified)
	//     based on intra-zone LbPolicy. This information comes from the above
	//     {Stream,Fetch}Endpoints.
	//  3. When upstream hosts reply, they optionally add header <define header
	//     name> with ASCII representation of EndpointLoadMetricStats.
	//  4. Envoy aggregates load reports over the period of time given to it in
	//     LoadStatsResponse.load_reporting_interval. This includes aggregation
	//     stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
	//     well as load metrics from upstream hosts.
	//  5. When the timer of load_reporting_interval expires, Envoy sends new
	//     LoadStatsRequest filled with load reports for each cluster.
	//  6. The management server uses the load reports from all reported Envoys
	//     from around the world, computes global assignment and prepares traffic
	//     assignment destined for each zone Envoys are located in. Goto 2.
	StreamLoadStats(context.Context) *connect_go.BidiStreamForClient[v2.LoadStatsRequest, v2.LoadStatsResponse]
}

// NewLoadReportingServiceClient constructs a client for the
// envoy.service.load_stats.v2.LoadReportingService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoadReportingServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LoadReportingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &loadReportingServiceClient{
		streamLoadStats: connect_go.NewClient[v2.LoadStatsRequest, v2.LoadStatsResponse](
			httpClient,
			baseURL+LoadReportingServiceStreamLoadStatsProcedure,
			opts...,
		),
	}
}

// loadReportingServiceClient implements LoadReportingServiceClient.
type loadReportingServiceClient struct {
	streamLoadStats *connect_go.Client[v2.LoadStatsRequest, v2.LoadStatsResponse]
}

// StreamLoadStats calls envoy.service.load_stats.v2.LoadReportingService.StreamLoadStats.
func (c *loadReportingServiceClient) StreamLoadStats(ctx context.Context) *connect_go.BidiStreamForClient[v2.LoadStatsRequest, v2.LoadStatsResponse] {
	return c.streamLoadStats.CallBidiStream(ctx)
}

// LoadReportingServiceHandler is an implementation of the
// envoy.service.load_stats.v2.LoadReportingService service.
type LoadReportingServiceHandler interface {
	// Advanced API to allow for multi-dimensional load balancing by remote
	// server. For receiving LB assignments, the steps are:
	// 1, The management server is configured with per cluster/zone/load metric
	//
	//	capacity configuration. The capacity configuration definition is
	//	outside of the scope of this document.
	//  2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
	//     to balance.
	//
	// Independently, Envoy will initiate a StreamLoadStats bidi stream with a
	// management server:
	//  1. Once a connection establishes, the management server publishes a
	//     LoadStatsResponse for all clusters it is interested in learning load
	//     stats about.
	//  2. For each cluster, Envoy load balances incoming traffic to upstream hosts
	//     based on per-zone weights and/or per-instance weights (if specified)
	//     based on intra-zone LbPolicy. This information comes from the above
	//     {Stream,Fetch}Endpoints.
	//  3. When upstream hosts reply, they optionally add header <define header
	//     name> with ASCII representation of EndpointLoadMetricStats.
	//  4. Envoy aggregates load reports over the period of time given to it in
	//     LoadStatsResponse.load_reporting_interval. This includes aggregation
	//     stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
	//     well as load metrics from upstream hosts.
	//  5. When the timer of load_reporting_interval expires, Envoy sends new
	//     LoadStatsRequest filled with load reports for each cluster.
	//  6. The management server uses the load reports from all reported Envoys
	//     from around the world, computes global assignment and prepares traffic
	//     assignment destined for each zone Envoys are located in. Goto 2.
	StreamLoadStats(context.Context, *connect_go.BidiStream[v2.LoadStatsRequest, v2.LoadStatsResponse]) error
}

// NewLoadReportingServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoadReportingServiceHandler(svc LoadReportingServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	loadReportingServiceStreamLoadStatsHandler := connect_go.NewBidiStreamHandler(
		LoadReportingServiceStreamLoadStatsProcedure,
		svc.StreamLoadStats,
		opts...,
	)
	return "/envoy.service.load_stats.v2.LoadReportingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoadReportingServiceStreamLoadStatsProcedure:
			loadReportingServiceStreamLoadStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoadReportingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoadReportingServiceHandler struct{}

func (UnimplementedLoadReportingServiceHandler) StreamLoadStats(context.Context, *connect_go.BidiStream[v2.LoadStatsRequest, v2.LoadStatsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("envoy.service.load_stats.v2.LoadReportingService.StreamLoadStats is not implemented"))
}
