// Copyright 2018 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// This file defines an interface for exporting monitoring information
// out of gRPC servers.  See the full design at
// https://github.com/grpc/proposal/blob/master/A14-channelz.md
//
// The canonical version of this proto can be found at
// https://github.com/grpc/grpc-proto/blob/master/grpc/channelz/v1/channelz.proto

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/channelz/v1/channelz.proto

package grpc_channelz_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	grpc_channelz_v1 "google.golang.org/grpc/channelz/grpc_channelz_v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ChannelzName is the fully-qualified name of the Channelz service.
	ChannelzName = "grpc.channelz.v1.Channelz"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChannelzGetTopChannelsProcedure is the fully-qualified name of the Channelz's GetTopChannels RPC.
	ChannelzGetTopChannelsProcedure = "/grpc.channelz.v1.Channelz/GetTopChannels"
	// ChannelzGetServersProcedure is the fully-qualified name of the Channelz's GetServers RPC.
	ChannelzGetServersProcedure = "/grpc.channelz.v1.Channelz/GetServers"
	// ChannelzGetServerProcedure is the fully-qualified name of the Channelz's GetServer RPC.
	ChannelzGetServerProcedure = "/grpc.channelz.v1.Channelz/GetServer"
	// ChannelzGetServerSocketsProcedure is the fully-qualified name of the Channelz's GetServerSockets
	// RPC.
	ChannelzGetServerSocketsProcedure = "/grpc.channelz.v1.Channelz/GetServerSockets"
	// ChannelzGetChannelProcedure is the fully-qualified name of the Channelz's GetChannel RPC.
	ChannelzGetChannelProcedure = "/grpc.channelz.v1.Channelz/GetChannel"
	// ChannelzGetSubchannelProcedure is the fully-qualified name of the Channelz's GetSubchannel RPC.
	ChannelzGetSubchannelProcedure = "/grpc.channelz.v1.Channelz/GetSubchannel"
	// ChannelzGetSocketProcedure is the fully-qualified name of the Channelz's GetSocket RPC.
	ChannelzGetSocketProcedure = "/grpc.channelz.v1.Channelz/GetSocket"
)

// ChannelzClient is a client for the grpc.channelz.v1.Channelz service.
type ChannelzClient interface {
	// Gets all root channels (i.e. channels the application has directly
	// created). This does not include subchannels nor non-top level channels.
	GetTopChannels(context.Context, *connect_go.Request[grpc_channelz_v1.GetTopChannelsRequest]) (*connect_go.Response[grpc_channelz_v1.GetTopChannelsResponse], error)
	// Gets all servers that exist in the process.
	GetServers(context.Context, *connect_go.Request[grpc_channelz_v1.GetServersRequest]) (*connect_go.Response[grpc_channelz_v1.GetServersResponse], error)
	// Returns a single Server, or else a NOT_FOUND code.
	GetServer(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerResponse], error)
	// Gets all server sockets that exist in the process.
	GetServerSockets(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerSocketsRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerSocketsResponse], error)
	// Returns a single Channel, or else a NOT_FOUND code.
	GetChannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetChannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetChannelResponse], error)
	// Returns a single Subchannel, or else a NOT_FOUND code.
	GetSubchannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetSubchannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetSubchannelResponse], error)
	// Returns a single Socket or else a NOT_FOUND code.
	GetSocket(context.Context, *connect_go.Request[grpc_channelz_v1.GetSocketRequest]) (*connect_go.Response[grpc_channelz_v1.GetSocketResponse], error)
}

// NewChannelzClient constructs a client for the grpc.channelz.v1.Channelz service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChannelzClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ChannelzClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &channelzClient{
		getTopChannels: connect_go.NewClient[grpc_channelz_v1.GetTopChannelsRequest, grpc_channelz_v1.GetTopChannelsResponse](
			httpClient,
			baseURL+ChannelzGetTopChannelsProcedure,
			opts...,
		),
		getServers: connect_go.NewClient[grpc_channelz_v1.GetServersRequest, grpc_channelz_v1.GetServersResponse](
			httpClient,
			baseURL+ChannelzGetServersProcedure,
			opts...,
		),
		getServer: connect_go.NewClient[grpc_channelz_v1.GetServerRequest, grpc_channelz_v1.GetServerResponse](
			httpClient,
			baseURL+ChannelzGetServerProcedure,
			opts...,
		),
		getServerSockets: connect_go.NewClient[grpc_channelz_v1.GetServerSocketsRequest, grpc_channelz_v1.GetServerSocketsResponse](
			httpClient,
			baseURL+ChannelzGetServerSocketsProcedure,
			opts...,
		),
		getChannel: connect_go.NewClient[grpc_channelz_v1.GetChannelRequest, grpc_channelz_v1.GetChannelResponse](
			httpClient,
			baseURL+ChannelzGetChannelProcedure,
			opts...,
		),
		getSubchannel: connect_go.NewClient[grpc_channelz_v1.GetSubchannelRequest, grpc_channelz_v1.GetSubchannelResponse](
			httpClient,
			baseURL+ChannelzGetSubchannelProcedure,
			opts...,
		),
		getSocket: connect_go.NewClient[grpc_channelz_v1.GetSocketRequest, grpc_channelz_v1.GetSocketResponse](
			httpClient,
			baseURL+ChannelzGetSocketProcedure,
			opts...,
		),
	}
}

// channelzClient implements ChannelzClient.
type channelzClient struct {
	getTopChannels   *connect_go.Client[grpc_channelz_v1.GetTopChannelsRequest, grpc_channelz_v1.GetTopChannelsResponse]
	getServers       *connect_go.Client[grpc_channelz_v1.GetServersRequest, grpc_channelz_v1.GetServersResponse]
	getServer        *connect_go.Client[grpc_channelz_v1.GetServerRequest, grpc_channelz_v1.GetServerResponse]
	getServerSockets *connect_go.Client[grpc_channelz_v1.GetServerSocketsRequest, grpc_channelz_v1.GetServerSocketsResponse]
	getChannel       *connect_go.Client[grpc_channelz_v1.GetChannelRequest, grpc_channelz_v1.GetChannelResponse]
	getSubchannel    *connect_go.Client[grpc_channelz_v1.GetSubchannelRequest, grpc_channelz_v1.GetSubchannelResponse]
	getSocket        *connect_go.Client[grpc_channelz_v1.GetSocketRequest, grpc_channelz_v1.GetSocketResponse]
}

// GetTopChannels calls grpc.channelz.v1.Channelz.GetTopChannels.
func (c *channelzClient) GetTopChannels(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetTopChannelsRequest]) (*connect_go.Response[grpc_channelz_v1.GetTopChannelsResponse], error) {
	return c.getTopChannels.CallUnary(ctx, req)
}

// GetServers calls grpc.channelz.v1.Channelz.GetServers.
func (c *channelzClient) GetServers(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetServersRequest]) (*connect_go.Response[grpc_channelz_v1.GetServersResponse], error) {
	return c.getServers.CallUnary(ctx, req)
}

// GetServer calls grpc.channelz.v1.Channelz.GetServer.
func (c *channelzClient) GetServer(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetServerRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerResponse], error) {
	return c.getServer.CallUnary(ctx, req)
}

// GetServerSockets calls grpc.channelz.v1.Channelz.GetServerSockets.
func (c *channelzClient) GetServerSockets(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetServerSocketsRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerSocketsResponse], error) {
	return c.getServerSockets.CallUnary(ctx, req)
}

// GetChannel calls grpc.channelz.v1.Channelz.GetChannel.
func (c *channelzClient) GetChannel(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetChannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetChannelResponse], error) {
	return c.getChannel.CallUnary(ctx, req)
}

// GetSubchannel calls grpc.channelz.v1.Channelz.GetSubchannel.
func (c *channelzClient) GetSubchannel(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetSubchannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetSubchannelResponse], error) {
	return c.getSubchannel.CallUnary(ctx, req)
}

// GetSocket calls grpc.channelz.v1.Channelz.GetSocket.
func (c *channelzClient) GetSocket(ctx context.Context, req *connect_go.Request[grpc_channelz_v1.GetSocketRequest]) (*connect_go.Response[grpc_channelz_v1.GetSocketResponse], error) {
	return c.getSocket.CallUnary(ctx, req)
}

// ChannelzHandler is an implementation of the grpc.channelz.v1.Channelz service.
type ChannelzHandler interface {
	// Gets all root channels (i.e. channels the application has directly
	// created). This does not include subchannels nor non-top level channels.
	GetTopChannels(context.Context, *connect_go.Request[grpc_channelz_v1.GetTopChannelsRequest]) (*connect_go.Response[grpc_channelz_v1.GetTopChannelsResponse], error)
	// Gets all servers that exist in the process.
	GetServers(context.Context, *connect_go.Request[grpc_channelz_v1.GetServersRequest]) (*connect_go.Response[grpc_channelz_v1.GetServersResponse], error)
	// Returns a single Server, or else a NOT_FOUND code.
	GetServer(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerResponse], error)
	// Gets all server sockets that exist in the process.
	GetServerSockets(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerSocketsRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerSocketsResponse], error)
	// Returns a single Channel, or else a NOT_FOUND code.
	GetChannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetChannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetChannelResponse], error)
	// Returns a single Subchannel, or else a NOT_FOUND code.
	GetSubchannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetSubchannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetSubchannelResponse], error)
	// Returns a single Socket or else a NOT_FOUND code.
	GetSocket(context.Context, *connect_go.Request[grpc_channelz_v1.GetSocketRequest]) (*connect_go.Response[grpc_channelz_v1.GetSocketResponse], error)
}

// NewChannelzHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChannelzHandler(svc ChannelzHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	channelzGetTopChannelsHandler := connect_go.NewUnaryHandler(
		ChannelzGetTopChannelsProcedure,
		svc.GetTopChannels,
		opts...,
	)
	channelzGetServersHandler := connect_go.NewUnaryHandler(
		ChannelzGetServersProcedure,
		svc.GetServers,
		opts...,
	)
	channelzGetServerHandler := connect_go.NewUnaryHandler(
		ChannelzGetServerProcedure,
		svc.GetServer,
		opts...,
	)
	channelzGetServerSocketsHandler := connect_go.NewUnaryHandler(
		ChannelzGetServerSocketsProcedure,
		svc.GetServerSockets,
		opts...,
	)
	channelzGetChannelHandler := connect_go.NewUnaryHandler(
		ChannelzGetChannelProcedure,
		svc.GetChannel,
		opts...,
	)
	channelzGetSubchannelHandler := connect_go.NewUnaryHandler(
		ChannelzGetSubchannelProcedure,
		svc.GetSubchannel,
		opts...,
	)
	channelzGetSocketHandler := connect_go.NewUnaryHandler(
		ChannelzGetSocketProcedure,
		svc.GetSocket,
		opts...,
	)
	return "/grpc.channelz.v1.Channelz/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChannelzGetTopChannelsProcedure:
			channelzGetTopChannelsHandler.ServeHTTP(w, r)
		case ChannelzGetServersProcedure:
			channelzGetServersHandler.ServeHTTP(w, r)
		case ChannelzGetServerProcedure:
			channelzGetServerHandler.ServeHTTP(w, r)
		case ChannelzGetServerSocketsProcedure:
			channelzGetServerSocketsHandler.ServeHTTP(w, r)
		case ChannelzGetChannelProcedure:
			channelzGetChannelHandler.ServeHTTP(w, r)
		case ChannelzGetSubchannelProcedure:
			channelzGetSubchannelHandler.ServeHTTP(w, r)
		case ChannelzGetSocketProcedure:
			channelzGetSocketHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChannelzHandler returns CodeUnimplemented from all methods.
type UnimplementedChannelzHandler struct{}

func (UnimplementedChannelzHandler) GetTopChannels(context.Context, *connect_go.Request[grpc_channelz_v1.GetTopChannelsRequest]) (*connect_go.Response[grpc_channelz_v1.GetTopChannelsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetTopChannels is not implemented"))
}

func (UnimplementedChannelzHandler) GetServers(context.Context, *connect_go.Request[grpc_channelz_v1.GetServersRequest]) (*connect_go.Response[grpc_channelz_v1.GetServersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetServers is not implemented"))
}

func (UnimplementedChannelzHandler) GetServer(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetServer is not implemented"))
}

func (UnimplementedChannelzHandler) GetServerSockets(context.Context, *connect_go.Request[grpc_channelz_v1.GetServerSocketsRequest]) (*connect_go.Response[grpc_channelz_v1.GetServerSocketsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetServerSockets is not implemented"))
}

func (UnimplementedChannelzHandler) GetChannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetChannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetChannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetChannel is not implemented"))
}

func (UnimplementedChannelzHandler) GetSubchannel(context.Context, *connect_go.Request[grpc_channelz_v1.GetSubchannelRequest]) (*connect_go.Response[grpc_channelz_v1.GetSubchannelResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetSubchannel is not implemented"))
}

func (UnimplementedChannelzHandler) GetSocket(context.Context, *connect_go.Request[grpc_channelz_v1.GetSocketRequest]) (*connect_go.Response[grpc_channelz_v1.GetSocketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.channelz.v1.Channelz.GetSocket is not implemented"))
}
