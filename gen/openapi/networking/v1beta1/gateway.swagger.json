{
  "swagger": "2.0",
  "info": {
    "title": "networking/v1beta1/gateway.proto",
    "description": "`Gateway` describes a load balancer operating at the edge of the mesh\nreceiving incoming or outgoing HTTP/TCP connections. The specification\ndescribes a set of ports that should be exposed, the type of protocol to\nuse, SNI configuration for the load balancer, etc.\n\nFor example, the following Gateway configuration sets up a proxy to act\nas a load balancer exposing port 80 and 9080 (http), 443 (https),\n9443(https) and port 2379 (TCP) for ingress.  The gateway will be\napplied to the proxy running on a pod with labels `app:\nmy-gateway-controller`. While Istio will configure the proxy to listen\non these ports, it is the responsibility of the user to ensure that\nexternal traffic to these ports are allowed into the mesh.\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: my-gateway\n  namespace: some-config-namespace\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - uk.bookinfo.com\n    - eu.bookinfo.com\n    tls:\n      httpsRedirect: true # sends 301 redirect for http requests\n  - port:\n      number: 443\n      name: https-443\n      protocol: HTTPS\n    hosts:\n    - uk.bookinfo.com\n    - eu.bookinfo.com\n    tls:\n      mode: SIMPLE # enables HTTPS on this port\n      serverCertificate: /etc/certs/servercert.pem\n      privateKey: /etc/certs/privatekey.pem\n  - port:\n      number: 9443\n      name: https-9443\n      protocol: HTTPS\n    hosts:\n    - \"bookinfo-namespace/*.bookinfo.com\"\n    tls:\n      mode: SIMPLE # enables HTTPS on this port\n      credentialName: bookinfo-secret # fetches certs from Kubernetes secret\n  - port:\n      number: 9080\n      name: http-wildcard\n      protocol: HTTP\n    hosts:\n    - \"*\"\n  - port:\n      number: 2379 # to expose internal service via external port 2379\n      name: mongo\n      protocol: MONGO\n    hosts:\n    - \"*\"\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-gateway\n  namespace: some-config-namespace\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - uk.bookinfo.com\n    - eu.bookinfo.com\n    tls:\n      httpsRedirect: true # sends 301 redirect for http requests\n  - port:\n      number: 443\n      name: https-443\n      protocol: HTTPS\n    hosts:\n    - uk.bookinfo.com\n    - eu.bookinfo.com\n    tls:\n      mode: SIMPLE # enables HTTPS on this port\n      serverCertificate: /etc/certs/servercert.pem\n      privateKey: /etc/certs/privatekey.pem\n  - port:\n      number: 9443\n      name: https-9443\n      protocol: HTTPS\n    hosts:\n    - \"bookinfo-namespace/*.bookinfo.com\"\n    tls:\n      mode: SIMPLE # enables HTTPS on this port\n      credentialName: bookinfo-secret # fetches certs from Kubernetes secret\n  - port:\n      number: 9080\n      name: http-wildcard\n      protocol: HTTP\n    hosts:\n    - \"*\"\n  - port:\n      number: 2379 # to expose internal service via external port 2379\n      name: mongo\n      protocol: MONGO\n    hosts:\n    - \"*\"\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\nThe Gateway specification above describes the L4-L6 properties of a load\nbalancer. A `VirtualService` can then be bound to a gateway to control\nthe forwarding of traffic arriving at a particular host or gateway port.\n\nFor example, the following VirtualService splits traffic for\n`https://uk.bookinfo.com/reviews`, `https://eu.bookinfo.com/reviews`,\n`http://uk.bookinfo.com:9080/reviews`,\n`http://eu.bookinfo.com:9080/reviews` into two versions (prod and qa) of\nan internal reviews service on port 9080. In addition, requests\ncontaining the cookie \"user: dev-123\" will be sent to special port 7777\nin the qa version. The same rule is also applicable inside the mesh for\nrequests to the \"reviews.prod.svc.cluster.local\" service. This rule is\napplicable across ports 443, 9080. Note that `http://uk.bookinfo.com`\ngets redirected to `https://uk.bookinfo.com` (i.e. 80 redirects to 443).\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: bookinfo-rule\n  namespace: bookinfo-namespace\nspec:\n  hosts:\n  - reviews.prod.svc.cluster.local\n  - uk.bookinfo.com\n  - eu.bookinfo.com\n  gateways:\n  - some-config-namespace/my-gateway\n  - mesh # applies to all the sidecars in the mesh\n  http:\n  - match:\n    - headers:\n        cookie:\n          exact: \"user=dev-123\"\n    route:\n    - destination:\n        port:\n          number: 7777\n        host: reviews.qa.svc.cluster.local\n  - match:\n    - uri:\n        prefix: /reviews/\n    route:\n    - destination:\n        port:\n          number: 9080 # can be omitted if it's the only port for reviews\n        host: reviews.prod.svc.cluster.local\n      weight: 80\n    - destination:\n        host: reviews.qa.svc.cluster.local\n      weight: 20\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: bookinfo-rule\n  namespace: bookinfo-namespace\nspec:\n  hosts:\n  - reviews.prod.svc.cluster.local\n  - uk.bookinfo.com\n  - eu.bookinfo.com\n  gateways:\n  - some-config-namespace/my-gateway\n  - mesh # applies to all the sidecars in the mesh\n  http:\n  - match:\n    - headers:\n        cookie:\n          exact: \"user=dev-123\"\n    route:\n    - destination:\n        port:\n          number: 7777\n        host: reviews.qa.svc.cluster.local\n  - match:\n    - uri:\n        prefix: /reviews/\n    route:\n    - destination:\n        port:\n          number: 9080 # can be omitted if it's the only port for reviews\n        host: reviews.prod.svc.cluster.local\n      weight: 80\n    - destination:\n        host: reviews.qa.svc.cluster.local\n      weight: 20\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\nThe following VirtualService forwards traffic arriving at (external)\nport 27017 to internal Mongo server on port 5555. This rule is not\napplicable internally in the mesh as the gateway list omits the\nreserved name `mesh`.\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: bookinfo-mongo\n  namespace: bookinfo-namespace\nspec:\n  hosts:\n  - mongosvr.prod.svc.cluster.local # name of internal Mongo service\n  gateways:\n  - some-config-namespace/my-gateway # can omit the namespace if gateway is in same namespace as virtual service.\n  tcp:\n  - match:\n    - port: 27017\n    route:\n    - destination:\n        host: mongo.prod.svc.cluster.local\n        port:\n          number: 5555\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: VirtualService\nmetadata:\n  name: bookinfo-mongo\n  namespace: bookinfo-namespace\nspec:\n  hosts:\n  - mongosvr.prod.svc.cluster.local # name of internal Mongo service\n  gateways:\n  - some-config-namespace/my-gateway # can omit the namespace if gateway is in same namespace as virtual service.\n  tcp:\n  - match:\n    - port: 27017\n    route:\n    - destination:\n        host: mongo.prod.svc.cluster.local\n        port:\n          number: 5555\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\nIt is possible to restrict the set of virtual services that can bind to\na gateway server using the namespace/hostname syntax in the hosts field.\nFor example, the following Gateway allows any virtual service in the ns1\nnamespace to bind to it, while restricting only the virtual service with\nfoo.bar.com host in the ns2 namespace to bind to it.\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: Gateway\nmetadata:\n  name: my-gateway\n  namespace: some-config-namespace\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"ns1/*\"\n    - \"ns2/foo.bar.com\"\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: my-gateway\n  namespace: some-config-namespace\nspec:\n  selector:\n    app: my-gateway-controller\n  servers:\n  - port:\n      number: 80\n      name: http\n      protocol: HTTP\n    hosts:\n    - \"ns1/*\"\n    - \"ns2/foo.bar.com\"\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    }
  }
}
