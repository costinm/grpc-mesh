{
  "swagger": "2.0",
  "info": {
    "title": "networking/v1beta1/workload_entry.proto",
    "description": "`WorkloadEntry` enables operators to describe the properties of a\nsingle non-Kubernetes workload such as a VM or a bare metal server\nas it is onboarded into the mesh. A `WorkloadEntry` must be\naccompanied by an Istio `ServiceEntry` that selects the workload\nthrough the appropriate labels and provides the service definition\nfor a `MESH_INTERNAL` service (hostnames, port properties, etc.). A\n`ServiceEntry` object can select multiple workload entries as well\nas Kubernetes pods based on the label selector specified in the\nservice entry.\n\nWhen a workload connects to `istiod`, the status field in the\ncustom resource will be updated to indicate the health of the\nworkload along with other details, similar to how Kubernetes\nupdates the status of a pod.\n\nThe following example declares a workload entry representing a VM\nfor the `details.bookinfo.com` service. This VM has sidecar\ninstalled and bootstrapped using the `details-legacy` service\naccount. The service is exposed on port 80 to applications in the\nmesh. The HTTP traffic to this service is wrapped in Istio mutual\nTLS and sent to sidecars on VMs on target port 8080, that in turn\nforward it to the application on localhost on the same port.\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: WorkloadEntry\nmetadata:\n  name: details-svc\nspec:\n  # use of the service account indicates that the workload has a\n  # sidecar proxy bootstrapped with this service account. Pods with\n  # sidecars will automatically communicate with the workload using\n  # istio mutual TLS.\n  serviceAccount: details-legacy\n  address: 2.2.2.2\n  labels:\n    app: details-legacy\n    instance-id: vm1\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: WorkloadEntry\nmetadata:\n  name: details-svc\nspec:\n  # use of the service account indicates that the workload has a\n  # sidecar proxy bootstrapped with this service account. Pods with\n  # sidecars will automatically communicate with the workload using\n  # istio mutual TLS.\n  serviceAccount: details-legacy\n  address: 2.2.2.2\n  labels:\n    app: details-legacy\n    instance-id: vm1\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\nand the associated service entry\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: details-svc\nspec:\n  hosts:\n  - details.bookinfo.com\n  location: MESH_INTERNAL\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n    targetPort: 8080\n  resolution: STATIC\n  workloadSelector:\n    labels:\n      app: details-legacy\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: ServiceEntry\nmetadata:\n  name: details-svc\nspec:\n  hosts:\n  - details.bookinfo.com\n  location: MESH_INTERNAL\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n    targetPort: 8080\n  resolution: STATIC\n  workloadSelector:\n    labels:\n      app: details-legacy\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\n\nThe following example declares the same VM workload using\nits fully qualified DNS name. The service entry's resolution\nmode should be changed to DNS to indicate that the client-side\nsidecars should dynamically resolve the DNS name at runtime before\nforwarding the request.\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: WorkloadEntry\nmetadata:\n  name: details-svc\nspec:\n  # use of the service account indicates that the workload has a\n  # sidecar proxy bootstrapped with this service account. Pods with\n  # sidecars will automatically communicate with the workload using\n  # istio mutual TLS.\n  serviceAccount: details-legacy\n  address: vm1.vpc01.corp.net\n  labels:\n    app: details-legacy\n    instance-id: vm1\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: WorkloadEntry\nmetadata:\n  name: details-svc\nspec:\n  # use of the service account indicates that the workload has a\n  # sidecar proxy bootstrapped with this service account. Pods with\n  # sidecars will automatically communicate with the workload using\n  # istio mutual TLS.\n  serviceAccount: details-legacy\n  address: vm1.vpc01.corp.net\n  labels:\n    app: details-legacy\n    instance-id: vm1\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}\n\nand the associated service entry\n\n{{\u003ctabset category-name=\"example\"\u003e}}\n{{\u003ctab name=\"v1alpha3\" category-value=\"v1alpha3\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1alpha3\nkind: ServiceEntry\nmetadata:\n  name: details-svc\nspec:\n  hosts:\n  - details.bookinfo.com\n  location: MESH_INTERNAL\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n    targetPort: 8080\n  resolution: DNS\n  workloadSelector:\n    labels:\n      app: details-legacy\n```\n{{\u003c/tab\u003e}}\n\n{{\u003ctab name=\"v1beta1\" category-value=\"v1beta1\"\u003e}}\n```yaml\napiVersion: networking.istio.io/v1beta1\nkind: ServiceEntry\nmetadata:\n  name: details-svc\nspec:\n  hosts:\n  - details.bookinfo.com\n  location: MESH_INTERNAL\n  ports:\n  - number: 80\n    name: http\n    protocol: HTTP\n    targetPort: 8080\n  resolution: DNS\n  workloadSelector:\n    labels:\n      app: details-legacy\n```\n{{\u003c/tab\u003e}}\n{{\u003c/tabset\u003e}}",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    }
  }
}
