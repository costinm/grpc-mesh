{
  "swagger": "2.0",
  "info": {
    "title": "opentelemetry/proto/collector/logs/v1/logs_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "LogsService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "resourcev1Resource": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "Set of attributes that describe the resource.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then\nno attributes were dropped."
        }
      },
      "description": "Resource information."
    },
    "v1AnyValue": {
      "type": "object",
      "properties": {
        "stringValue": {
          "type": "string"
        },
        "boolValue": {
          "type": "boolean"
        },
        "intValue": {
          "type": "string",
          "format": "int64"
        },
        "doubleValue": {
          "type": "number",
          "format": "double"
        },
        "arrayValue": {
          "$ref": "#/definitions/v1ArrayValue"
        },
        "kvlistValue": {
          "$ref": "#/definitions/v1KeyValueList"
        },
        "bytesValue": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a\nprimitive value such as a string or integer or it may contain an arbitrary nested\nobject containing arrays, key-value lists and primitives."
    },
    "v1ArrayValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AnyValue"
          },
          "description": "Array of values. The array may be empty (contain 0 elements)."
        }
      },
      "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\nsince oneof in AnyValue does not allow repeated fields."
    },
    "v1ExportLogsPartialSuccess": {
      "type": "object",
      "properties": {
        "rejectedLogRecords": {
          "type": "string",
          "format": "int64",
          "description": "The number of rejected log records.\n\nA `rejected_\u003csignal\u003e` field holding a `0` value indicates that the\nrequest was fully accepted."
        },
        "errorMessage": {
          "type": "string",
          "description": "A developer-facing human-readable message in English. It should be used\neither to explain why the server rejected parts of the data during a partial\nsuccess or to convey warnings/suggestions during a full success. The message\nshould offer guidance on how users can address such issues.\n\nerror_message is an optional field. An error_message with an empty value\nis equivalent to it not being set."
        }
      }
    },
    "v1ExportLogsServiceResponse": {
      "type": "object",
      "properties": {
        "partialSuccess": {
          "$ref": "#/definitions/v1ExportLogsPartialSuccess",
          "description": "The details of a partially successful export request.\n\nIf the request is only partially accepted\n(i.e. when the server accepts only parts of the data and rejects the rest)\nthe server MUST initialize the `partial_success` field and MUST\nset the `rejected_\u003csignal\u003e` with the number of items it rejected.\n\nServers MAY also make use of the `partial_success` field to convey\nwarnings/suggestions to senders even when the request was fully accepted.\nIn such cases, the `rejected_\u003csignal\u003e` MUST have a value of `0` and\nthe `error_message` MUST be non-empty.\n\nA `partial_success` message with an empty value (rejected_\u003csignal\u003e = 0 and\n`error_message` = \"\") is equivalent to it not being set/present. Senders\nSHOULD interpret it the same way as in the full success case."
        }
      }
    },
    "v1InstrumentationScope": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "An empty instrumentation scope name means the name is unknown."
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyValue"
          }
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "InstrumentationScope is a message representing the instrumentation scope information\nsuch as the fully qualified name and version."
    },
    "v1KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/v1AnyValue"
        }
      },
      "description": "KeyValue is a key-value pair that is used to store Span attributes, Link\nattributes, etc."
    },
    "v1KeyValueList": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may\ncontain 0 elements).\nThe keys MUST be unique (it is not allowed to have more than one\nvalue with the same key)."
        }
      },
      "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\nsince `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\na list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\navoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\nare semantically equivalent."
    },
    "v1LogRecord": {
      "type": "object",
      "properties": {
        "timeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "time_unix_nano is the time when the event occurred.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\nValue of 0 indicates unknown or missing timestamp."
        },
        "observedTimeUnixNano": {
          "type": "string",
          "format": "uint64",
          "description": "Time when the event was observed by the collection system.\nFor events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging SDK)\nthis timestamp is typically set at the generation time and is equal to Timestamp.\nFor events originating externally and collected by OpenTelemetry (e.g. using\nCollector) this is the time when OpenTelemetry's code observed the event measured\nby the clock of the OpenTelemetry code. This field MUST be set once the event is\nobserved by OpenTelemetry.\n\nFor converting OpenTelemetry log data to formats that support only one timestamp or\nwhen receiving OpenTelemetry log data by recipients that support only one timestamp\ninternally the following logic is recommended:\n  - Use time_unix_nano if it is present, otherwise use observed_time_unix_nano.\n\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\nValue of 0 indicates unknown or missing timestamp."
        },
        "severityNumber": {
          "$ref": "#/definitions/v1SeverityNumber",
          "description": "Numerical value of the severity, normalized to values described in Log Data Model.\n[Optional]."
        },
        "severityText": {
          "type": "string",
          "description": "The severity text (also known as log level). The original string representation as\nit is known at the source. [Optional]."
        },
        "body": {
          "$ref": "#/definitions/v1AnyValue",
          "description": "A value containing the body of the log record. Can be for example a human-readable\nstring message (including multi-line) describing the event in a free form or it can\nbe a structured data composed of arrays and maps of other values. [Optional]."
        },
        "attributes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "Additional attributes that describe the specific event occurrence. [Optional].\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "droppedAttributesCount": {
          "type": "integer",
          "format": "int64"
        },
        "flags": {
          "type": "integer",
          "format": "int64",
          "description": "Flags, a bit field. 8 least significant bits are the trace flags as\ndefined in W3C Trace Context specification. 24 most significant bits are reserved\nand must be set to 0. Readers must not assume that 24 most significant bits\nwill be zero and must correctly mask the bits when reading 8-bit trace flag (use\nflags \u0026 TRACE_FLAGS_MASK). [Optional]."
        },
        "traceId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All logs from the same trace share\nthe same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\nis considered invalid. Can be set for logs that are part of request processing\nand have an assigned trace id. [Optional]."
        },
        "spanId": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array. An ID with all zeroes is considered\ninvalid. Can be set for logs that are part of a particular processing span.\nIf span_id is present trace_id SHOULD be also present. [Optional]."
        }
      },
      "title": "A log record according to OpenTelemetry Log Data Model:\nhttps://github.com/open-telemetry/oteps/blob/main/text/logs/0097-log-data-model.md"
    },
    "v1ResourceLogs": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/resourcev1Resource",
          "description": "The resource for the logs in this message.\nIf this field is not set then resource info is unknown."
        },
        "scopeLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ScopeLogs"
          },
          "description": "A list of ScopeLogs that originate from a resource."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to the data in the \"resource\" field. It does not apply\nto the data in the \"scope_logs\" field which have their own schema_url field."
        }
      },
      "description": "A collection of ScopeLogs from a Resource."
    },
    "v1ScopeLogs": {
      "type": "object",
      "properties": {
        "scope": {
          "$ref": "#/definitions/v1InstrumentationScope",
          "description": "The instrumentation scope information for the logs in this message.\nSemantically when InstrumentationScope isn't set, it is equivalent with\nan empty instrumentation scope name (unknown)."
        },
        "logRecords": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LogRecord"
          },
          "description": "A list of log records."
        },
        "schemaUrl": {
          "type": "string",
          "description": "This schema_url applies to all logs in the \"logs\" field."
        }
      },
      "description": "A collection of Logs produced by a Scope."
    },
    "v1SeverityNumber": {
      "type": "string",
      "enum": [
        "SEVERITY_NUMBER_UNSPECIFIED",
        "SEVERITY_NUMBER_TRACE",
        "SEVERITY_NUMBER_TRACE2",
        "SEVERITY_NUMBER_TRACE3",
        "SEVERITY_NUMBER_TRACE4",
        "SEVERITY_NUMBER_DEBUG",
        "SEVERITY_NUMBER_DEBUG2",
        "SEVERITY_NUMBER_DEBUG3",
        "SEVERITY_NUMBER_DEBUG4",
        "SEVERITY_NUMBER_INFO",
        "SEVERITY_NUMBER_INFO2",
        "SEVERITY_NUMBER_INFO3",
        "SEVERITY_NUMBER_INFO4",
        "SEVERITY_NUMBER_WARN",
        "SEVERITY_NUMBER_WARN2",
        "SEVERITY_NUMBER_WARN3",
        "SEVERITY_NUMBER_WARN4",
        "SEVERITY_NUMBER_ERROR",
        "SEVERITY_NUMBER_ERROR2",
        "SEVERITY_NUMBER_ERROR3",
        "SEVERITY_NUMBER_ERROR4",
        "SEVERITY_NUMBER_FATAL",
        "SEVERITY_NUMBER_FATAL2",
        "SEVERITY_NUMBER_FATAL3",
        "SEVERITY_NUMBER_FATAL4"
      ],
      "default": "SEVERITY_NUMBER_UNSPECIFIED",
      "description": "Possible values for LogRecord.SeverityNumber.\n\n - SEVERITY_NUMBER_UNSPECIFIED: UNSPECIFIED is the default SeverityNumber, it MUST NOT be used."
    }
  }
}
