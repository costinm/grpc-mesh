{
  "swagger": "2.0",
  "info": {
    "title": "GRPC package - part of the URL. Service is added.\nURL: /PACKAGE.SERVICE/METHOD",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "AggregatedDiscoveryService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "DiscoveryResponseControlPlane": {
      "type": "object",
      "properties": {
        "Identifier": {
          "type": "string"
        }
      }
    },
    "ResourceCacheControl": {
      "type": "object",
      "properties": {
        "doNotCache": {
          "type": "boolean",
          "description": "If true, xDS proxies may not cache this resource.\nNote that this does not apply to clients other than xDS proxies, which must cache resources\nfor their own use, regardless of the value of this field."
        }
      },
      "title": "Cache control properties for the resource.\n[#not-implemented-hide:]"
    },
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "xdsAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name whose content describes the type of the\nserialized protocol buffer message.\n\nFor URLs which use the scheme `http`, `https`, or no scheme, the\nfollowing restrictions and interpretations apply:\n\n* If no scheme is provided, `https` is assumed.\n* The last segment of the URL's path must represent the fully\n  qualified name of the type (as in `path/google.protobuf.Duration`).\n  The name should be in a canonical form (e.g., leading \".\" is\n  not accepted).\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "xdsDeltaDiscoveryResponse": {
      "type": "object",
      "properties": {
        "systemVersionInfo": {
          "type": "string",
          "description": "The version of the response data (used for debugging)."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/xdsResource"
          },
          "description": "The response resources. These are typed resources, whose types must match\nthe type_url field."
        },
        "typeUrl": {
          "type": "string",
          "description": "Type URL for resources. Identifies the xDS API when muxing over ADS.\nMust be consistent with the type_url in the Any within 'resources' if 'resources' is non-empty."
        },
        "removedResources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Resources names of resources that have be deleted and to be removed from the xDS Client.\nRemoved resources for missing resources can be ignored."
        },
        "nonce": {
          "type": "string",
          "description": "The nonce provides a way for DeltaDiscoveryRequests to uniquely\nreference a DeltaDiscoveryResponse when (N)ACKing. The nonce is required."
        }
      }
    },
    "xdsDiscoveryResponse": {
      "type": "object",
      "properties": {
        "versionInfo": {
          "type": "string",
          "description": "The version of the response data."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/xdsAny"
          },
          "title": "The response resources. These resources are typed and depend on the API being called.\ngoogle.protobuf.Any"
        },
        "canary": {
          "type": "boolean",
          "description": "* --terminate-on-canary-transition-failure. When set, Envoy is able to\n  terminate if it detects that configuration is stuck at canary. Consider\n  this example sequence of updates:\n  - Management server applies a canary config successfully.\n  - Management server rolls back to a production config.\n  - Envoy rejects the new production config.\n  Since there is no sensible way to continue receiving configuration\n  updates, Envoy will then terminate and apply production config from a\n  clean slate.\n* --dry-run-canary. When set, a canary response will never be applied, only\n  validated via a dry run.",
          "title": "[#not-implemented-hide:]\nCanary is used to support two Envoy command line flags:"
        },
        "typeUrl": {
          "type": "string",
          "description": "Type URL for resources. This must be consistent with the type_url in the\nAny messages for resources if resources is non-empty. This effectively\nidentifies the xDS API when muxing over ADS."
        },
        "nonce": {
          "type": "string",
          "description": "For gRPC based subscriptions, the nonce provides a way to explicitly ack a\nspecific DiscoveryResponse in a following DiscoveryRequest. Additional\nmessages may have been sent by Envoy to the management server for the\nprevious version on the stream prior to this DiscoveryResponse, that were\nunprocessed at response send time. The nonce allows the management server\nto ignore any further DiscoveryRequests for the previous version until a\nDiscoveryRequest bearing the nonce. The nonce is optional and is not\nrequired for non-stream based xDS implementations."
        },
        "controlPlane": {
          "$ref": "#/definitions/DiscoveryResponseControlPlane"
        }
      }
    },
    "xdsListValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/xdsValue"
          },
          "description": "Repeated field of dynamically typed values."
        }
      },
      "description": "`ListValue` is a wrapper around a repeated field of values.\n\nThe JSON representation for `ListValue` is JSON array."
    },
    "xdsLocality": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "description": "Region this :ref:`zone \u003cenvoy_api_field_core.Locality.zone\u003e` belongs to."
        },
        "zone": {
          "type": "string",
          "description": "Defines the local service zone where Envoy is running. Though optional, it\nshould be set if discovery service routing is used and the discovery\nservice exposes :ref:`zone data \u003cconfig_cluster_manager_sds_api_host_az\u003e`,\neither in this message or via :option:`--service-zone`. The meaning of zone\nis context dependent, e.g. `Availability Zone (AZ)\n\u003chttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\u003e`_\non AWS, `Zone \u003chttps://cloud.google.com/compute/docs/regions-zones/\u003e`_ on\nGCP, etc."
        },
        "subZone": {
          "type": "string",
          "description": "When used for locality of upstream hosts, this field further splits zone\ninto smaller chunks of sub-zones so they can be load balanced\nindependently."
        }
      },
      "description": "Identifies location of where either Envoy runs or where upstream hosts run."
    },
    "xdsNode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "An opaque node identifier for the Envoy node. This also provides the local\nservice node name. It should be set if any of the following features are\nused: :ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`CDS\n\u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n\u003carch_overview_tracing\u003e`, either in this message or via\n:option:`--service-node`."
        },
        "cluster": {
          "type": "string",
          "description": "Defines the local service cluster name where Envoy is running. Though\noptional, it should be set if any of the following features are used:\n:ref:`statsd \u003carch_overview_statistics\u003e`, :ref:`health check cluster\nverification \u003cconfig_cluster_manager_cluster_hc_service_name\u003e`,\n:ref:`runtime override directory \u003cconfig_runtime_override_subdirectory\u003e`,\n:ref:`user agent addition \u003cconfig_http_conn_man_add_user_agent\u003e`,\n:ref:`HTTP global rate limiting \u003cconfig_http_filters_rate_limit\u003e`,\n:ref:`CDS \u003cconfig_cluster_manager_cds\u003e`, and :ref:`HTTP tracing\n\u003carch_overview_tracing\u003e`, either in this message or via\n:option:`--service-cluster`."
        },
        "metadata": {
          "$ref": "#/definitions/xdsStruct",
          "description": "Opaque metadata extending the node identifier. Envoy will pass this\ndirectly to the management server."
        },
        "locality": {
          "$ref": "#/definitions/xdsLocality",
          "description": "Locality specifying where the Envoy instance is running."
        },
        "buildVersion": {
          "type": "string",
          "description": "This is motivated by informing a management server during canary which\nversion of Envoy is being tested in a heterogeneous fleet. This will be set\nby Envoy in management server RPCs."
        }
      },
      "description": "Identifies a specific Envoy instance. The node identifier is presented to the\nmanagement server, which may use this identifier to distinguish per Envoy\nconfiguration for serving."
    },
    "xdsNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "xdsResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The resource's name, to distinguish it from others of the same type of resource."
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The aliases are a list of other names that this resource can go by."
        },
        "version": {
          "type": "string",
          "description": "The resource level version. It allows xDS to track the state of individual\nresources."
        },
        "resource": {
          "$ref": "#/definitions/googleprotobufAny",
          "title": "The resource being tracked.\n google.protobuf.Any resource = 2;"
        },
        "ttl": {
          "type": "string",
          "description": "Time-to-live value for the resource. For each resource, a timer is started. The timer is\nreset each time the resource is received with a new TTL. If the resource is received with\nno TTL set, the timer is removed for the resource. Upon expiration of the timer, the\nconfiguration for the resource will be removed.\n\nThe TTL can be refreshed or changed by sending a response that doesn't change the resource\nversion. In this case the resource field does not need to be populated, which allows for\nlight-weight \"heartbeat\" updates to keep a resource with a TTL alive.\n\nThe TTL feature is meant to support configurations that should be removed in the event of\na management server failure. For example, the feature may be used for fault injection\ntesting where the fault injection should be terminated in the event that Envoy loses contact\nwith the management server."
        },
        "cacheControl": {
          "$ref": "#/definitions/ResourceCacheControl",
          "title": "Cache control properties for the resource.\n[#not-implemented-hide:]"
        }
      }
    },
    "xdsStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/xdsAny"
          },
          "title": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.\ngoogle.protobuf.Any"
        }
      },
      "description": "- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\n[google.rpc.Code][google.rpc.Code], but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "title": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:"
    },
    "xdsStruct": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/xdsValue"
          },
          "description": "Unordered map of dynamically typed values."
        }
      },
      "description": "`Struct` represents a structured data value, consisting of fields\nwhich map to dynamically typed values. In some languages, `Struct`\nmight be supported by a native representation. For example, in\nscripting languages like JS a struct is represented as an\nobject. The details of that representation are described together\nwith the proto support for the language.\n\nThe JSON representation for `Struct` is JSON object."
    },
    "xdsValue": {
      "type": "object",
      "properties": {
        "nullValue": {
          "$ref": "#/definitions/xdsNullValue",
          "description": "Represents a null value."
        },
        "numberValue": {
          "type": "number",
          "format": "double",
          "description": "Represents a double value."
        },
        "stringValue": {
          "type": "string",
          "description": "Represents a string value."
        },
        "boolValue": {
          "type": "boolean",
          "description": "Represents a boolean value."
        },
        "structValue": {
          "$ref": "#/definitions/xdsStruct",
          "description": "Represents a structured value."
        },
        "listValue": {
          "$ref": "#/definitions/xdsListValue",
          "description": "Represents a repeated `Value`."
        }
      },
      "description": "`Value` represents a dynamically typed value which can be either\nnull, a number, a string, a boolean, a recursive struct value, or a\nlist of values. A producer of value is expected to set one of that\nvariants, absence of any variant indicates an error.\n\nThe JSON representation for `Value` is JSON value."
    }
  }
}
