{
  "swagger": "2.0",
  "info": {
    "title": "grpc/testing/benchmark_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "BenchmarkService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "grpctestingBoolValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "boolean",
          "description": "The bool value."
        }
      },
      "title": "TODO(dgq): Go back to using well-known types once\nhttps://github.com/grpc/grpc/issues/6980 has been fixed.\nimport \"google/protobuf/wrappers.proto\";"
    },
    "testingEchoStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "description": "A protobuf representation for grpc status. This is used by test\nclients to specify a status that the server should attempt to return."
    },
    "testingGrpclbRouteType": {
      "type": "string",
      "enum": [
        "GRPCLB_ROUTE_TYPE_UNKNOWN",
        "GRPCLB_ROUTE_TYPE_FALLBACK",
        "GRPCLB_ROUTE_TYPE_BACKEND"
      ],
      "default": "GRPCLB_ROUTE_TYPE_UNKNOWN",
      "description": "The type of route that a client took to reach a server w.r.t. gRPCLB.\nThe server must fill in \"fallback\" if it detects that the RPC reached\nthe server via the \"gRPCLB fallback\" path, and \"backend\" if it detects\nthat the RPC reached the server via \"gRPCLB backend\" path (i.e. if it got\nthe address of this server from the gRPCLB server BalanceLoad RPC). Exactly\nhow this detection is done is context and server dependent.\n\n - GRPCLB_ROUTE_TYPE_UNKNOWN: Server didn't detect the route that a client took to reach it.\n - GRPCLB_ROUTE_TYPE_FALLBACK: Indicates that a client reached a server via gRPCLB fallback.\n - GRPCLB_ROUTE_TYPE_BACKEND: Indicates that a client reached a server as a gRPCLB-given backend."
    },
    "testingPayload": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/testingPayloadType",
          "description": "The type of data in body."
        },
        "body": {
          "type": "string",
          "format": "byte",
          "description": "Primary contents of payload."
        }
      },
      "description": "A block of data, to simply increase gRPC message size."
    },
    "testingPayloadType": {
      "type": "string",
      "enum": [
        "COMPRESSABLE"
      ],
      "default": "COMPRESSABLE",
      "description": "The type of payload that should be returned.\n\n - COMPRESSABLE: Compressable text format."
    },
    "testingSimpleResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "$ref": "#/definitions/testingPayload",
          "description": "Payload to increase message size."
        },
        "username": {
          "type": "string",
          "description": "The user the request came from, for verifying authentication was\nsuccessful when the client expected it."
        },
        "oauthScope": {
          "type": "string",
          "description": "OAuth scope."
        },
        "serverId": {
          "type": "string",
          "description": "Server ID. This must be unique among different server instances,\nbut the same across all RPC's made to a particular server instance."
        },
        "grpclbRouteType": {
          "$ref": "#/definitions/testingGrpclbRouteType",
          "description": "gRPCLB Path."
        },
        "hostname": {
          "type": "string",
          "description": "Server hostname."
        }
      },
      "description": "Unary response, as configured by the request."
    }
  }
}
