{
  "swagger": "2.0",
  "info": {
    "title": "grpc/reflection/v1/reflection.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ServerReflection"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {},
  "definitions": {
    "googleprotobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code]."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\n[google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/googleprotobufAny"
          },
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for\ndifferent programming environments, including REST APIs and RPC APIs. It is\nused by [gRPC](https://github.com/grpc). Each `Status` message contains\nthree pieces of data: error code, error message, and error details.\n\nYou can find out more about this error model and how to work with it in the\n[API Design Guide](https://cloud.google.com/apis/design/errors)."
    },
    "v1ErrorResponse": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "integer",
          "format": "int32",
          "description": "This field uses the error codes defined in grpc::StatusCode."
        },
        "errorMessage": {
          "type": "string"
        }
      },
      "description": "The error code and error message sent by the server when an error occurs."
    },
    "v1ExtensionNumberResponse": {
      "type": "object",
      "properties": {
        "baseTypeName": {
          "type": "string",
          "title": "Full name of the base type, including the package name. The format\nis \u003cpackage\u003e.\u003ctype\u003e"
        },
        "extensionNumber": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "description": "A list of extension numbers sent by the server answering\nall_extension_numbers_of_type request."
    },
    "v1ExtensionRequest": {
      "type": "object",
      "properties": {
        "containingType": {
          "type": "string",
          "title": "Fully-qualified type name. The format should be \u003cpackage\u003e.\u003ctype\u003e"
        },
        "extensionNumber": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "The type name and extension number sent by the client when requesting\nfile_containing_extension."
    },
    "v1FileDescriptorResponse": {
      "type": "object",
      "properties": {
        "fileDescriptorProto": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Serialized FileDescriptorProto messages. We avoid taking a dependency on\ndescriptor.proto, which uses proto2 only features, by making them opaque\nbytes instead."
        }
      },
      "description": "Serialized FileDescriptorProto messages sent by the server answering\na file_by_filename, file_containing_symbol, or file_containing_extension\nrequest."
    },
    "v1ListServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceResponse"
          },
          "description": "The information of each service may be expanded in the future, so we use\nServiceResponse message to encapsulate it."
        }
      },
      "description": "A list of ServiceResponse sent by the server answering list_services request."
    },
    "v1ServerReflectionRequest": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string"
        },
        "fileByFilename": {
          "type": "string",
          "description": "Find a proto file by the file name."
        },
        "fileContainingSymbol": {
          "type": "string",
          "description": "Find the proto file that declares the given fully-qualified symbol name.\nThis field should be a fully-qualified symbol name\n(e.g. \u003cpackage\u003e.\u003cservice\u003e[.\u003cmethod\u003e] or \u003cpackage\u003e.\u003ctype\u003e)."
        },
        "fileContainingExtension": {
          "$ref": "#/definitions/v1ExtensionRequest",
          "description": "Find the proto file which defines an extension extending the given\nmessage type with the given field number."
        },
        "allExtensionNumbersOfType": {
          "type": "string",
          "title": "Finds the tag numbers used by all known extensions of the given message\ntype, and appends them to ExtensionNumberResponse in an undefined order.\nIts corresponding method is best-effort: it's not guaranteed that the\nreflection service will implement this method, and it's not guaranteed\nthat this method will provide all extensions. Returns\nStatusCode::UNIMPLEMENTED if it's not implemented.\nThis field should be a fully-qualified type name. The format is\n\u003cpackage\u003e.\u003ctype\u003e"
        },
        "listServices": {
          "type": "string",
          "description": "List the full names of registered services. The content will not be\nchecked."
        }
      },
      "description": "The message sent by the client when calling ServerReflectionInfo method."
    },
    "v1ServerReflectionResponse": {
      "type": "object",
      "properties": {
        "validHost": {
          "type": "string"
        },
        "originalRequest": {
          "$ref": "#/definitions/v1ServerReflectionRequest"
        },
        "fileDescriptorResponse": {
          "$ref": "#/definitions/v1FileDescriptorResponse",
          "description": "This message is used to answer file_by_filename, file_containing_symbol,\nfile_containing_extension requests with transitive dependencies.\nAs the repeated label is not allowed in oneof fields, we use a\nFileDescriptorResponse message to encapsulate the repeated fields.\nThe reflection service is allowed to avoid sending FileDescriptorProtos\nthat were previously sent in response to earlier requests in the stream."
        },
        "allExtensionNumbersResponse": {
          "$ref": "#/definitions/v1ExtensionNumberResponse",
          "description": "This message is used to answer all_extension_numbers_of_type requests."
        },
        "listServicesResponse": {
          "$ref": "#/definitions/v1ListServiceResponse",
          "description": "This message is used to answer list_services requests."
        },
        "errorResponse": {
          "$ref": "#/definitions/v1ErrorResponse",
          "description": "This message is used when an error occurs."
        }
      },
      "description": "The message sent by the server to answer ServerReflectionInfo method."
    },
    "v1ServiceResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Full name of a registered service, including its package name. The format\nis \u003cpackage\u003e.\u003cservice\u003e"
        }
      },
      "description": "The information of a single service used by ListServiceResponse to answer\nlist_services request."
    }
  }
}
