// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc/testing/worker_service.proto

package testingconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	testing "github.com/costinm/grpc-mesh/proto/grpc/testing"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// WorkerServiceName is the fully-qualified name of the WorkerService service.
	WorkerServiceName = "grpc.testing.WorkerService"
)

// WorkerServiceClient is a client for the grpc.testing.WorkerService service.
type WorkerServiceClient interface {
	// Start server with specified workload.
	// First request sent specifies the ServerConfig followed by ServerStatus
	// response. After that, a "Mark" can be sent anytime to request the latest
	// stats. Closing the stream will initiate shutdown of the test server
	// and once the shutdown has finished, the OK status is sent to terminate
	// this RPC.
	RunServer(context.Context) *connect_go.BidiStreamForClient[testing.ServerArgs, testing.ServerStatus]
	// Start client with specified workload.
	// First request sent specifies the ClientConfig followed by ClientStatus
	// response. After that, a "Mark" can be sent anytime to request the latest
	// stats. Closing the stream will initiate shutdown of the test client
	// and once the shutdown has finished, the OK status is sent to terminate
	// this RPC.
	RunClient(context.Context) *connect_go.BidiStreamForClient[testing.ClientArgs, testing.ClientStatus]
	// Just return the core count - unary call
	CoreCount(context.Context, *connect_go.Request[testing.CoreRequest]) (*connect_go.Response[testing.CoreResponse], error)
	// Quit this worker
	QuitWorker(context.Context, *connect_go.Request[testing.Void]) (*connect_go.Response[testing.Void], error)
}

// NewWorkerServiceClient constructs a client for the grpc.testing.WorkerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) WorkerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &workerServiceClient{
		runServer: connect_go.NewClient[testing.ServerArgs, testing.ServerStatus](
			httpClient,
			baseURL+"/grpc.testing.WorkerService/RunServer",
			opts...,
		),
		runClient: connect_go.NewClient[testing.ClientArgs, testing.ClientStatus](
			httpClient,
			baseURL+"/grpc.testing.WorkerService/RunClient",
			opts...,
		),
		coreCount: connect_go.NewClient[testing.CoreRequest, testing.CoreResponse](
			httpClient,
			baseURL+"/grpc.testing.WorkerService/CoreCount",
			opts...,
		),
		quitWorker: connect_go.NewClient[testing.Void, testing.Void](
			httpClient,
			baseURL+"/grpc.testing.WorkerService/QuitWorker",
			opts...,
		),
	}
}

// workerServiceClient implements WorkerServiceClient.
type workerServiceClient struct {
	runServer  *connect_go.Client[testing.ServerArgs, testing.ServerStatus]
	runClient  *connect_go.Client[testing.ClientArgs, testing.ClientStatus]
	coreCount  *connect_go.Client[testing.CoreRequest, testing.CoreResponse]
	quitWorker *connect_go.Client[testing.Void, testing.Void]
}

// RunServer calls grpc.testing.WorkerService.RunServer.
func (c *workerServiceClient) RunServer(ctx context.Context) *connect_go.BidiStreamForClient[testing.ServerArgs, testing.ServerStatus] {
	return c.runServer.CallBidiStream(ctx)
}

// RunClient calls grpc.testing.WorkerService.RunClient.
func (c *workerServiceClient) RunClient(ctx context.Context) *connect_go.BidiStreamForClient[testing.ClientArgs, testing.ClientStatus] {
	return c.runClient.CallBidiStream(ctx)
}

// CoreCount calls grpc.testing.WorkerService.CoreCount.
func (c *workerServiceClient) CoreCount(ctx context.Context, req *connect_go.Request[testing.CoreRequest]) (*connect_go.Response[testing.CoreResponse], error) {
	return c.coreCount.CallUnary(ctx, req)
}

// QuitWorker calls grpc.testing.WorkerService.QuitWorker.
func (c *workerServiceClient) QuitWorker(ctx context.Context, req *connect_go.Request[testing.Void]) (*connect_go.Response[testing.Void], error) {
	return c.quitWorker.CallUnary(ctx, req)
}

// WorkerServiceHandler is an implementation of the grpc.testing.WorkerService service.
type WorkerServiceHandler interface {
	// Start server with specified workload.
	// First request sent specifies the ServerConfig followed by ServerStatus
	// response. After that, a "Mark" can be sent anytime to request the latest
	// stats. Closing the stream will initiate shutdown of the test server
	// and once the shutdown has finished, the OK status is sent to terminate
	// this RPC.
	RunServer(context.Context, *connect_go.BidiStream[testing.ServerArgs, testing.ServerStatus]) error
	// Start client with specified workload.
	// First request sent specifies the ClientConfig followed by ClientStatus
	// response. After that, a "Mark" can be sent anytime to request the latest
	// stats. Closing the stream will initiate shutdown of the test client
	// and once the shutdown has finished, the OK status is sent to terminate
	// this RPC.
	RunClient(context.Context, *connect_go.BidiStream[testing.ClientArgs, testing.ClientStatus]) error
	// Just return the core count - unary call
	CoreCount(context.Context, *connect_go.Request[testing.CoreRequest]) (*connect_go.Response[testing.CoreResponse], error)
	// Quit this worker
	QuitWorker(context.Context, *connect_go.Request[testing.Void]) (*connect_go.Response[testing.Void], error)
}

// NewWorkerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkerServiceHandler(svc WorkerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/grpc.testing.WorkerService/RunServer", connect_go.NewBidiStreamHandler(
		"/grpc.testing.WorkerService/RunServer",
		svc.RunServer,
		opts...,
	))
	mux.Handle("/grpc.testing.WorkerService/RunClient", connect_go.NewBidiStreamHandler(
		"/grpc.testing.WorkerService/RunClient",
		svc.RunClient,
		opts...,
	))
	mux.Handle("/grpc.testing.WorkerService/CoreCount", connect_go.NewUnaryHandler(
		"/grpc.testing.WorkerService/CoreCount",
		svc.CoreCount,
		opts...,
	))
	mux.Handle("/grpc.testing.WorkerService/QuitWorker", connect_go.NewUnaryHandler(
		"/grpc.testing.WorkerService/QuitWorker",
		svc.QuitWorker,
		opts...,
	))
	return "/grpc.testing.WorkerService/", mux
}

// UnimplementedWorkerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkerServiceHandler struct{}

func (UnimplementedWorkerServiceHandler) RunServer(context.Context, *connect_go.BidiStream[testing.ServerArgs, testing.ServerStatus]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.testing.WorkerService.RunServer is not implemented"))
}

func (UnimplementedWorkerServiceHandler) RunClient(context.Context, *connect_go.BidiStream[testing.ClientArgs, testing.ClientStatus]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.testing.WorkerService.RunClient is not implemented"))
}

func (UnimplementedWorkerServiceHandler) CoreCount(context.Context, *connect_go.Request[testing.CoreRequest]) (*connect_go.Response[testing.CoreResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.testing.WorkerService.CoreCount is not implemented"))
}

func (UnimplementedWorkerServiceHandler) QuitWorker(context.Context, *connect_go.Request[testing.Void]) (*connect_go.Response[testing.Void], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("grpc.testing.WorkerService.QuitWorker is not implemented"))
}
