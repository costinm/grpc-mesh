// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: konectivity.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/costinm/ugate/gen/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProxyServiceName is the fully-qualified name of the ProxyService service.
	ProxyServiceName = "ProxyService"
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "AgentService"
)

// ProxyServiceClient is a client for the ProxyService service.
type ProxyServiceClient interface {
	Proxy(context.Context) *connect_go.BidiStreamForClient[proto.Packet, proto.Packet]
}

// NewProxyServiceClient constructs a client for the ProxyService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProxyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProxyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &proxyServiceClient{
		proxy: connect_go.NewClient[proto.Packet, proto.Packet](
			httpClient,
			baseURL+"/.ProxyService/Proxy",
			opts...,
		),
	}
}

// proxyServiceClient implements ProxyServiceClient.
type proxyServiceClient struct {
	proxy *connect_go.Client[proto.Packet, proto.Packet]
}

// Proxy calls ProxyService.Proxy.
func (c *proxyServiceClient) Proxy(ctx context.Context) *connect_go.BidiStreamForClient[proto.Packet, proto.Packet] {
	return c.proxy.CallBidiStream(ctx)
}

// ProxyServiceHandler is an implementation of the ProxyService service.
type ProxyServiceHandler interface {
	Proxy(context.Context, *connect_go.BidiStream[proto.Packet, proto.Packet]) error
}

// NewProxyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProxyServiceHandler(svc ProxyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.ProxyService/Proxy", connect_go.NewBidiStreamHandler(
		"/.ProxyService/Proxy",
		svc.Proxy,
		opts...,
	))
	return "/.ProxyService/", mux
}

// UnimplementedProxyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProxyServiceHandler struct{}

func (UnimplementedProxyServiceHandler) Proxy(context.Context, *connect_go.BidiStream[proto.Packet, proto.Packet]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("ProxyService.Proxy is not implemented"))
}

// AgentServiceClient is a client for the AgentService service.
type AgentServiceClient interface {
	// Agent Identifier?
	Connect(context.Context) *connect_go.BidiStreamForClient[proto.Packet, proto.Packet]
}

// NewAgentServiceClient constructs a client for the AgentService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		connect: connect_go.NewClient[proto.Packet, proto.Packet](
			httpClient,
			baseURL+"/.AgentService/Connect",
			opts...,
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	connect *connect_go.Client[proto.Packet, proto.Packet]
}

// Connect calls AgentService.Connect.
func (c *agentServiceClient) Connect(ctx context.Context) *connect_go.BidiStreamForClient[proto.Packet, proto.Packet] {
	return c.connect.CallBidiStream(ctx)
}

// AgentServiceHandler is an implementation of the AgentService service.
type AgentServiceHandler interface {
	// Agent Identifier?
	Connect(context.Context, *connect_go.BidiStream[proto.Packet, proto.Packet]) error
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/.AgentService/Connect", connect_go.NewBidiStreamHandler(
		"/.AgentService/Connect",
		svc.Connect,
		opts...,
	))
	return "/.AgentService/", mux
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) Connect(context.Context, *connect_go.BidiStream[proto.Packet, proto.Packet]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("AgentService.Connect is not implemented"))
}
