// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fgrpc/ping.proto

package fgrpcconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	fgrpc "github.com/costinm/grpc-mesh/gen/proto/go/fgrpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// PingServerName is the fully-qualified name of the PingServer service.
	PingServerName = "fgrpc.PingServer"
)

// PingServerClient is a client for the fgrpc.PingServer service.
type PingServerClient interface {
	Ping(context.Context, *connect_go.Request[fgrpc.PingMessage]) (*connect_go.Response[fgrpc.PingMessage], error)
}

// NewPingServerClient constructs a client for the fgrpc.PingServer service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPingServerClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PingServerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pingServerClient{
		ping: connect_go.NewClient[fgrpc.PingMessage, fgrpc.PingMessage](
			httpClient,
			baseURL+"/fgrpc.PingServer/Ping",
			opts...,
		),
	}
}

// pingServerClient implements PingServerClient.
type pingServerClient struct {
	ping *connect_go.Client[fgrpc.PingMessage, fgrpc.PingMessage]
}

// Ping calls fgrpc.PingServer.Ping.
func (c *pingServerClient) Ping(ctx context.Context, req *connect_go.Request[fgrpc.PingMessage]) (*connect_go.Response[fgrpc.PingMessage], error) {
	return c.ping.CallUnary(ctx, req)
}

// PingServerHandler is an implementation of the fgrpc.PingServer service.
type PingServerHandler interface {
	Ping(context.Context, *connect_go.Request[fgrpc.PingMessage]) (*connect_go.Response[fgrpc.PingMessage], error)
}

// NewPingServerHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPingServerHandler(svc PingServerHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/fgrpc.PingServer/Ping", connect_go.NewUnaryHandler(
		"/fgrpc.PingServer/Ping",
		svc.Ping,
		opts...,
	))
	return "/fgrpc.PingServer/", mux
}

// UnimplementedPingServerHandler returns CodeUnimplemented from all methods.
type UnimplementedPingServerHandler struct{}

func (UnimplementedPingServerHandler) Ping(context.Context, *connect_go.Request[fgrpc.PingMessage]) (*connect_go.Response[fgrpc.PingMessage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("fgrpc.PingServer.Ping is not implemented"))
}
