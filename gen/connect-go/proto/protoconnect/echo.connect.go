// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/echo.proto

package protoconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	proto "github.com/costinm/grpc-mesh/gen/proto/go/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// EchoTestServiceName is the fully-qualified name of the EchoTestService service.
	EchoTestServiceName = "proto.EchoTestService"
)

// EchoTestServiceClient is a client for the proto.EchoTestService service.
type EchoTestServiceClient interface {
	Echo(context.Context, *connect_go.Request[proto.EchoRequest]) (*connect_go.Response[proto.EchoResponse], error)
	ForwardEcho(context.Context, *connect_go.Request[proto.ForwardEchoRequest]) (*connect_go.Response[proto.ForwardEchoResponse], error)
}

// NewEchoTestServiceClient constructs a client for the proto.EchoTestService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoTestServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) EchoTestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &echoTestServiceClient{
		echo: connect_go.NewClient[proto.EchoRequest, proto.EchoResponse](
			httpClient,
			baseURL+"/proto.EchoTestService/Echo",
			opts...,
		),
		forwardEcho: connect_go.NewClient[proto.ForwardEchoRequest, proto.ForwardEchoResponse](
			httpClient,
			baseURL+"/proto.EchoTestService/ForwardEcho",
			opts...,
		),
	}
}

// echoTestServiceClient implements EchoTestServiceClient.
type echoTestServiceClient struct {
	echo        *connect_go.Client[proto.EchoRequest, proto.EchoResponse]
	forwardEcho *connect_go.Client[proto.ForwardEchoRequest, proto.ForwardEchoResponse]
}

// Echo calls proto.EchoTestService.Echo.
func (c *echoTestServiceClient) Echo(ctx context.Context, req *connect_go.Request[proto.EchoRequest]) (*connect_go.Response[proto.EchoResponse], error) {
	return c.echo.CallUnary(ctx, req)
}

// ForwardEcho calls proto.EchoTestService.ForwardEcho.
func (c *echoTestServiceClient) ForwardEcho(ctx context.Context, req *connect_go.Request[proto.ForwardEchoRequest]) (*connect_go.Response[proto.ForwardEchoResponse], error) {
	return c.forwardEcho.CallUnary(ctx, req)
}

// EchoTestServiceHandler is an implementation of the proto.EchoTestService service.
type EchoTestServiceHandler interface {
	Echo(context.Context, *connect_go.Request[proto.EchoRequest]) (*connect_go.Response[proto.EchoResponse], error)
	ForwardEcho(context.Context, *connect_go.Request[proto.ForwardEchoRequest]) (*connect_go.Response[proto.ForwardEchoResponse], error)
}

// NewEchoTestServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoTestServiceHandler(svc EchoTestServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.EchoTestService/Echo", connect_go.NewUnaryHandler(
		"/proto.EchoTestService/Echo",
		svc.Echo,
		opts...,
	))
	mux.Handle("/proto.EchoTestService/ForwardEcho", connect_go.NewUnaryHandler(
		"/proto.EchoTestService/ForwardEcho",
		svc.ForwardEcho,
		opts...,
	))
	return "/proto.EchoTestService/", mux
}

// UnimplementedEchoTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoTestServiceHandler struct{}

func (UnimplementedEchoTestServiceHandler) Echo(context.Context, *connect_go.Request[proto.EchoRequest]) (*connect_go.Response[proto.EchoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.EchoTestService.Echo is not implemented"))
}

func (UnimplementedEchoTestServiceHandler) ForwardEcho(context.Context, *connect_go.Request[proto.ForwardEchoRequest]) (*connect_go.Response[proto.ForwardEchoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.EchoTestService.ForwardEcho is not implemented"))
}
