// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "go.opentelemetry.io/proto/otlp/collector/metrics/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MetricsServiceName is the fully-qualified name of the MetricsService service.
	MetricsServiceName = "opentelemetry.proto.collector.metrics.v1.MetricsService"
)

// MetricsServiceClient is a client for the opentelemetry.proto.collector.metrics.v1.MetricsService
// service.
type MetricsServiceClient interface {
	// For performance reasons, it is recommended to keep this RPC
	// alive for the entire life of the application.
	Export(context.Context, *connect_go.Request[v1.ExportMetricsServiceRequest]) (*connect_go.Response[v1.ExportMetricsServiceResponse], error)
}

// NewMetricsServiceClient constructs a client for the
// opentelemetry.proto.collector.metrics.v1.MetricsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMetricsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MetricsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &metricsServiceClient{
		export: connect_go.NewClient[v1.ExportMetricsServiceRequest, v1.ExportMetricsServiceResponse](
			httpClient,
			baseURL+"/opentelemetry.proto.collector.metrics.v1.MetricsService/Export",
			opts...,
		),
	}
}

// metricsServiceClient implements MetricsServiceClient.
type metricsServiceClient struct {
	export *connect_go.Client[v1.ExportMetricsServiceRequest, v1.ExportMetricsServiceResponse]
}

// Export calls opentelemetry.proto.collector.metrics.v1.MetricsService.Export.
func (c *metricsServiceClient) Export(ctx context.Context, req *connect_go.Request[v1.ExportMetricsServiceRequest]) (*connect_go.Response[v1.ExportMetricsServiceResponse], error) {
	return c.export.CallUnary(ctx, req)
}

// MetricsServiceHandler is an implementation of the
// opentelemetry.proto.collector.metrics.v1.MetricsService service.
type MetricsServiceHandler interface {
	// For performance reasons, it is recommended to keep this RPC
	// alive for the entire life of the application.
	Export(context.Context, *connect_go.Request[v1.ExportMetricsServiceRequest]) (*connect_go.Response[v1.ExportMetricsServiceResponse], error)
}

// NewMetricsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMetricsServiceHandler(svc MetricsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/opentelemetry.proto.collector.metrics.v1.MetricsService/Export", connect_go.NewUnaryHandler(
		"/opentelemetry.proto.collector.metrics.v1.MetricsService/Export",
		svc.Export,
		opts...,
	))
	return "/opentelemetry.proto.collector.metrics.v1.MetricsService/", mux
}

// UnimplementedMetricsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMetricsServiceHandler struct{}

func (UnimplementedMetricsServiceHandler) Export(context.Context, *connect_go.Request[v1.ExportMetricsServiceRequest]) (*connect_go.Response[v1.ExportMetricsServiceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("opentelemetry.proto.collector.metrics.v1.MetricsService.Export is not implemented"))
}
